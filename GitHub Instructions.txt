How to use GitHub:

0.  Have your own fork of the myclicker project.
At Yingxue's repository, choose to fork the myclicker project: this will create a duplicate of the project with your user id.
You will be able to update this repository at will, and it will be needed to create "pull requests" to change the main project

1.  Have Git installed on your computer.  
http://code.google.com/p/msysgit/downloads/detail?name=Git-1.8.1.2-preview20130201.exe&can=2&q=label%3AFeatured
This link provides a download that works for Windows.  You can install using the default methods.

2.  Using the interface
"Git Gui" is the name of a graphic interface application for git.  Usually this appears as a program in the computer's start menu.
If that doesn't work, type "git gui" into the bash script (described below) to start the application.
Alternatively, the git bash script file can be launched to use a command prompt for using git (this is located directly inside th folder where Git was installed)
The tutorials on GitHub (found on the home page) can be used to learn how to use this interface.  The rest of this document will focus on git gui.

Editing files occurs normally outside of the git gui or command prompt.  Git is used for the following actions:
A. Creating, cloning, or opening a repository (.git file)
These are rather self-explanatory.
Clone the fork of Yingxue's myclicker project you should have made by now.  This way, you'll have a "remote" set up so you can send your changes to your GitHub account easily.

B. Pushing Commits
After changing the contents of any repository, you can "push" these changes to any other repository that yours is linked to.  
A cloned repository, by default, has its original as a remote labeled "origin".
If you want, list Yingxue's repository (and others) as seperate remotes as well.

To commit/push these changes, first use the "rescan" button so the repository can find changes in its contents.
Check that all the changes you want made are there, then press "Stage Changes".  The files will be moved from the "Unstaged Changes" bar to the "Staged (will Commit)".
Add a comment about the changes you made (you will get an error otherwise), then press "Commit".  The repository will be changed to contain these changed files.
Press "Push" to push your commited changes to a remote: by default the "origin" of a cloned repository.  Press "Okay" in the pop-up window unless you want a different remote or branch.
You will have to supply your GitHub name and password to succeed.
NOTE: you will only be able to push changes to your own GitHub repository, not to Yingxue's or anyone else.  I'll get to pull requests later

C.  Fetching/Pulling from other repositories
This allows you to stay synched with other repositories.  
DO THIS BEFORE PUSH REQUESTS to ensure that you do not get file conflicts: these are confusing situations where Git can't merge different files.
Remote->Fetch from...->origin or All.
You can then rescan your local repository and examine the changes, then commit them normally.
You'll sometimes see "pull" in Git language: that's a command where fetching and merging/commiting changes is done simultaneously.  Git Gui doesn't support that on its own.

4.  Pull Requests
You cannot change the repositories of other users.  However, you can request that they do.
Inside github.com, go to your forked repository.  Select the "Pull Request" button near the top of the screen.  
By default, it should have the correct branches: your master branch requesting from the branch it was forked from.
Add a comment about your changes, and a title (you won't be able to send the request otherwise), then press "submit".
The other user will be able to view and accept/deny the pull request.


